{"version":3,"sources":["components/recipeViews/recipeShowTitle.jsx","components/stars.jsx","constants/stars.js","components/recipeViews/recipeShowHeader.jsx","components/starRow.jsx","components/recipes.jsx","components/categories.jsx","authProvider.js","App.jsx","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","text","fontWeight","alignContent","root","RecipeShowTitle","props","classes","record","className","title","Stars","rating","this","whiteStars","blackStars","Number","Array","map","PureComponent","float","width","paddingBlock","RecipeShowHeader","servings","duration","StarRow","PostTitle","RecipeFilter","Filter","TextInput","label","source","alwaysOn","ReferenceInput","reference","allowEmpty","SelectInput","optionText","RecipeList","List","filters","bulkActionButtons","Datagrid","rowClick","TextField","NumberField","ReferenceField","RecipeShow","Show","SimpleShowLayout","RichTextField","validateRating","number","minValue","maxValue","RecipeEdit","Edit","SimpleForm","NumberInput","validate","RecipeCreate","Create","multiline","CategoryCreate","CategoryList","CategoryEdit","CategoryShow","DateField","login","username","password","Promise","reject","localStorage","setItem","window","location","reload","resolve","logout","removeItem","checkError","status","checkAuth","getItem","getPermissions","preAuthDataProvider","getList","data","getOne","getMany","getManyReference","create","update","updateMany","delete","deleteMany","App","state","dataProvider","key","setState","headers","client","ApolloClient","uri","buildHasuraProvider","newDataProvider","Admin","authProvider","Resource","name","show","list","edit","icon","MenuBookIcon","CategoryIcon","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0iBAGMA,EAAYC,YAAW,CAC3BC,KAAM,CACJC,WAAY,OACZC,aAAc,UAEhBC,KAAM,CACJ,aAAc,YAcHC,EAVS,SAACC,GACvB,IAAMC,EAAUR,IACGO,EAAXE,OACR,OACE,yBAAKC,UAAWF,EAAQH,MACtB,0BAAMK,UAAWF,EAAQN,MAAOK,EAAME,OAAOE,S,SCYpCC,E,uKA1BH,IACAC,EAAWC,KAAKP,MAAhBM,OACJE,ECNiB,EDOjBC,EAAa,EAQjB,OAPIH,IACFE,ECTmB,EDSME,OAAOJ,GAChCG,EAAaH,ECVM,IDU2BA,GAE5CE,EAAa,IACfA,EAAa,GAERF,EACL,8BACG,YAAIK,MAAMF,IAAaG,KAAI,kBAC1B,2CAED,YAAID,MAAMH,IAAaI,KAAI,kBAC1B,4CAIJ,O,GAtBcC,iBECdpB,EAAYC,YAAW,CAC3B,YAAa,CACXoB,MAAO,OACP,aAAc,OACdC,MAAO,OAET,cAAe,CACbD,MAAO,OACP,aAAc,SACdC,MAAO,OAET,aAAc,CACZD,MAAO,OACP,aAAc,QACdC,MAAO,OAETjB,KAAM,CACJkB,aAAc,UAmBHC,EAfU,SAACjB,GACxB,IAAMC,EAAUR,IACRS,EAAWF,EAAXE,OACAI,EAA+BJ,EAA/BI,OAAQY,EAAuBhB,EAAvBgB,SAAUC,EAAajB,EAAbiB,SAC1B,OACE,yBAAKhB,UAAWF,EAAQH,MACtB,0BAAMK,UAAWF,EAAQ,cACvB,kBAAC,EAAD,CAAOK,OAAQA,KAEjB,0BAAMH,UAAWF,EAAQ,gBAAiBiB,EAA1C,aACA,0BAAMf,UAAWF,EAAQ,eAAgBkB,EAAzC,cCxBSC,E,uKAPH,IAEAd,EADWC,KAAKP,MAAhBE,OACAI,OACR,OAAO,kBAAC,EAAD,CAAOA,OAAQA,Q,GAJJO,iBCyBhBQ,EAAY,SAAC,GAAgB,IAAdnB,EAAa,EAAbA,OACnB,OAAO,8BAAOA,EAAM,UAAMA,EAAOE,OAAU,KAGvCkB,EAAe,SAACtB,GAAD,OACnB,kBAACuB,EAAA,EAAWvB,EACV,kBAACwB,EAAA,EAAD,CAAWC,MAAM,gBAAgBC,OAAO,QAAQC,UAAQ,IACxD,kBAACH,EAAA,EAAD,CAAWC,MAAM,qBAAqBC,OAAO,cAAcC,UAAQ,IACnE,kBAACC,EAAA,EAAD,CAAgBH,MAAM,WAAWC,OAAO,cAAcG,UAAU,aAAaC,YAAU,GACrF,kBAACC,EAAA,EAAD,CAAaC,WAAW,YAKjBC,EAAa,SAACjC,GAAD,OACxB,kBAACkC,EAAA,EAAD,iBAAUlC,EAAV,CAAiBmC,QAAS,kBAAC,EAAD,MAAkBC,mBAAmB,IAC7D,kBAACC,EAAA,EAAD,CAAUC,SAAS,QACjB,kBAACC,EAAA,EAAD,CAAWb,OAAO,UAClB,kBAAC,EAAD,CAASA,OAAO,WAChB,kBAACc,EAAA,EAAD,CAAad,OAAO,aACpB,kBAACe,EAAA,EAAD,CAAgBf,OAAO,cAAcG,UAAU,cAC7C,kBAACU,EAAA,EAAD,CAAWb,OAAO,aAMbgB,EAAa,SAAC1C,GAAD,OACxB,kBAAC2C,EAAA,EAAD,iBAAU3C,EAAV,CAAiBI,MAAO,kBAAC,EAAD,QACtB,kBAACwC,EAAA,EAAD,KACE,kBAAC,EAAD,CAAiBlB,OAAO,UACxB,kBAAC,EAAD,MACA,kBAACmB,EAAA,EAAD,CAAenB,OAAO,gBACtB,kBAACmB,EAAA,EAAD,CAAenB,OAAO,kBAKtBoB,GAAiB,CAACC,cAAUC,YAAS,GAAIC,YAAS,IAE3CC,GAAa,SAAClD,GAAD,OACxB,kBAACmD,EAAA,EAASnD,EACR,kBAACoD,EAAA,EAAD,KACE,kBAAC5B,EAAA,EAAD,CAAWE,OAAO,UAClB,kBAAC2B,EAAA,EAAD,CAAa3B,OAAO,SAAS4B,SAAUR,KACvC,kBAACO,EAAA,EAAD,CAAa3B,OAAO,aACpB,kBAAC2B,EAAA,EAAD,CAAa3B,OAAO,aACpB,kBAACE,EAAA,EAAD,CAAgBF,OAAO,cAAcG,UAAU,cAC7C,kBAACE,EAAA,EAAD,CAAaC,WAAW,UAE1B,kBAAC,IAAD,CAAeN,OAAO,gBACtB,kBAAC,IAAD,CAAeA,OAAO,kBAKf6B,GAAe,SAACvD,GAAD,OAC1B,kBAACwD,EAAA,EAAWxD,EACV,kBAACoD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAa3B,OAAO,WACpB,kBAACF,EAAA,EAAD,CAAWiC,WAAS,EAAC/B,OAAO,gBAC5B,kBAACF,EAAA,EAAD,CAAWE,OAAO,UAClB,kBAACF,EAAA,EAAD,CAAWiC,WAAS,EAAC/B,OAAO,kB,UCrErBgC,GAAiB,SAAC1D,GAAD,OAC5B,kBAACwD,EAAA,EAAWxD,EACV,kBAACoD,EAAA,EAAD,KACE,kBAAC5B,EAAA,EAAD,CAAWE,OAAO,YAKXiC,GAAe,SAAC3D,GAAD,OAC1B,kBAACkC,EAAA,EAASlC,EACR,kBAACqC,EAAA,EAAD,CAAUC,SAAS,QACjB,kBAACC,EAAA,EAAD,CAAWb,OAAO,YAKXkC,GAAe,SAAC5D,GAAD,OAC1B,kBAACmD,EAAA,EAASnD,EACR,kBAACoD,EAAA,EAAD,KACE,kBAAC5B,EAAA,EAAD,CAAWE,OAAO,YAKXmC,GAAe,SAAC7D,GAAD,OAC1B,kBAAC2C,EAAA,EAAS3C,EACR,kBAAC4C,EAAA,EAAD,KACE,kBAACL,EAAA,EAAD,CAAWb,OAAO,SAClB,kBAACoC,GAAA,EAAD,CAAWpC,OAAO,eAClB,kBAACoC,GAAA,EAAD,CAAWpC,OAAO,kBClDT,IAEbqC,MAAO,YAA6B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAElB,MAAiB,mBAAbD,EACKE,QAAQC,UAIjBC,aAAaC,QAAQ,MAAOJ,GAE5BK,OAAOC,SAASC,SACTN,QAAQO,YAGjBC,OAAQ,WAEN,OADAN,aAAaO,WAAW,OACjBT,QAAQO,WAGjBG,WAAY,YAAiB,IAAdC,EAAa,EAAbA,OACb,OAAe,MAAXA,GAA6B,MAAXA,GACpBT,aAAaO,WAAW,OACjBT,QAAQC,UAEVD,QAAQO,WAGjBK,UAAW,WACT,OAAOV,aAAaW,QAAQ,OAASb,QAAQO,UAAYP,QAAQC,UAGnEa,eAAgB,kBAAMd,QAAQO,YCtB1BQ,GAAsB,CAC1BC,QAAS,kBAAMhB,QAAQO,QAAQ,CAAEU,KAAM,MACvCC,OAAQ,kBAAMlB,QAAQO,QAAQ,OAC9BY,QAAS,kBAAMnB,QAAQO,QAAQ,OAC/Ba,iBAAkB,kBAAMpB,QAAQO,QAAQ,OACxCc,OAAQ,kBAAMrB,QAAQO,QAAQ,OAC9Be,OAAQ,kBAAMtB,QAAQO,QAAQ,OAC9BgB,WAAY,kBAAMvB,QAAQO,QAAQ,OAClCiB,OAAQ,kBAAMxB,QAAQO,QAAQ,OAC9BkB,WAAY,kBAAMzB,QAAQO,QAAQ,QA6ErBmB,G,kDAzEb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CAAEC,aAAc,MAFjB,E,yLAMNC,EAAM3B,aAAaW,QAAQ,O,uBAE/BxE,KAAKyF,SAAS,CAAEF,aAAcb,K,iCAG1BgB,EAAU,CACd,eAAgB,mBAChB,wBAAyBF,GAErBG,EAAS,IAAIC,IAAa,CAC9BC,IAAK,yDACLH,Y,SAGyBI,IAAoB,CAAEH,W,OAA3CJ,E,OACNvF,KAAKyF,SAAS,CAAEF,iB,2QAIVC,EAAM3B,aAAaW,QAAQ,OAEZ,OADIxE,KAAKsF,MAAtBC,eACqBC,E,uBACrBE,EAAU,CACd,eAAgB,mBAChB,wBAAyBF,GAErBG,EAAS,IAAIC,IAAa,CAC9BC,IAAK,yDACLH,Y,SAG4BI,IAAoB,CAAEH,W,OAA9CI,E,OAEN/F,KAAKyF,SAAS,CAAEF,aAAcQ,I,qIAIxB,IACAR,EAAiBvF,KAAKsF,MAAtBC,aAER,OAAKA,EAKH,kBAACS,EAAA,EAAD,CAAOT,aAAcA,EAAcU,aAAcA,IAC/C,kBAACC,EAAA,EAAD,CACEC,KAAK,UACLC,KAAMjE,EACNkE,KAAM3E,EACN4E,KAAM3D,GACNqC,OAAQhC,GACRuD,KAAMC,MAER,kBAACN,EAAA,EAAD,CACEC,KAAK,aACLC,KAAM9C,GACN+C,KAAMjD,GACNkD,KAAMjD,GACN2B,OAAQ7B,GACRoD,KAAME,OAnBH,4C,GAhDKC,aCVEC,QACW,cAA7B5C,OAAOC,SAAS4C,UAEe,UAA7B7C,OAAOC,SAAS4C,UAEhB7C,OAAOC,SAAS4C,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,GAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.441ee5c9.chunk.js","sourcesContent":["import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles({\n  text: {\n    fontWeight: 'bold',\n    alignContent: 'center',\n  },\n  root: {\n    'text-align': 'center',\n  },\n})\n\nconst RecipeShowTitle = (props) => {\n  const classes = useStyles()\n  const { record } = props\n  return (\n    <div className={classes.root}>\n      <span className={classes.text}>{props.record.title}</span>\n    </div>\n  )\n}\n\nexport default RecipeShowTitle\n","import React, { PureComponent } from 'react'\nimport { MAX_STARS } from '../constants/stars'\n\nclass Stars extends PureComponent {\n  render() {\n    const { rating } = this.props\n    let whiteStars = MAX_STARS\n    let blackStars = 0\n    if (rating) {\n      whiteStars = MAX_STARS - Number(rating)\n      blackStars = rating > MAX_STARS ? MAX_STARS : rating\n    }\n    if (whiteStars < 0) {\n      whiteStars = 0\n    }\n    return rating ? (\n      <span>\n        {[...Array(blackStars)].map(() => (\n          <span>★</span>\n        ))}\n        {[...Array(whiteStars)].map(() => (\n          <span>☆</span>\n        ))}\n      </span>\n    ) : (\n      ''\n    )\n  }\n}\n\nexport default Stars\n","export const MAX_STARS = 5","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Stars from '../stars'\n\nconst useStyles = makeStyles({\n  'text-left': {\n    float: 'left',\n    'text-align': 'left',\n    width: '33%',\n  },\n  'text-center': {\n    float: 'left',\n    'text-align': 'center',\n    width: '34%',\n  },\n  'text-right': {\n    float: 'left',\n    'text-align': 'right',\n    width: '33%',\n  },\n  root: {\n    paddingBlock: '2rem',\n  },\n})\n\nconst RecipeShowHeader = (props) => {\n  const classes = useStyles()\n  const { record } = props\n  const { rating, servings, duration } = record\n  return (\n    <div className={classes.root}>\n      <span className={classes['text-left']}>\n        <Stars rating={rating} />\n      </span>\n      <span className={classes['text-center']}>{servings} servings</span>\n      <span className={classes['text-right']}>{duration} minutes</span>\n    </div>\n  )\n}\n\nexport default RecipeShowHeader\n","import React, { PureComponent } from 'react'\nimport Stars from './stars'\n\nclass StarRow extends PureComponent {\n  render() {\n    const { record } = this.props\n    const { rating } = record\n    return <Stars rating={rating} />\n  }\n}\n\nexport default StarRow\n","import React from 'react'\nimport {\n  minValue,\n  maxValue,\n  number,\n  ReferenceField,\n  Filter,\n  SelectInput,\n  ReferenceInput,\n  Show,\n  NumberInput,\n  RichTextField,\n  ShowView,\n  SimpleShowLayout,\n  Create,\n  Edit,\n  TextInput,\n  SimpleForm,\n  NumberField,\n  List,\n  Datagrid,\n  TextField,\n} from 'react-admin'\nimport RichTextInput from 'ra-input-rich-text'\nimport RecipeShowTitle from './recipeViews/recipeShowTitle'\nimport RecipeShowHeader from './recipeViews/recipeShowHeader'\nimport StarRow from './starRow'\n\nconst PostTitle = ({ record }) => {\n  return <span>{record ? `${record.title}` : ''}</span>\n}\n\nconst RecipeFilter = (props) => (\n  <Filter {...props}>\n    <TextInput label=\"Search titles\" source=\"title\" alwaysOn />\n    <TextInput label=\"Search ingredients\" source=\"ingredients\" alwaysOn />\n    <ReferenceInput label=\"Category\" source=\"category_id\" reference=\"categories\" allowEmpty>\n      <SelectInput optionText=\"name\" />\n    </ReferenceInput>\n  </Filter>\n)\n\nexport const RecipeList = (props) => (\n  <List {...props} filters={<RecipeFilter />} bulkActionButtons={false}>\n    <Datagrid rowClick=\"show\">\n      <TextField source=\"title\" />\n      <StarRow source=\"rating\" />\n      <NumberField source=\"servings\" />\n      <ReferenceField source=\"category_id\" reference=\"categories\">\n        <TextField source=\"name\" />\n      </ReferenceField>\n    </Datagrid>\n  </List>\n)\n\nexport const RecipeShow = (props) => (\n  <Show {...props} title={<PostTitle />}>\n    <SimpleShowLayout>\n      <RecipeShowTitle source=\"title\" />\n      <RecipeShowHeader />\n      <RichTextField source=\"ingredients\" />\n      <RichTextField source=\"directions\" />\n    </SimpleShowLayout>\n  </Show>\n)\n\nconst validateRating = [number(), minValue(1), maxValue(5)]\n\nexport const RecipeEdit = (props) => (\n  <Edit {...props}>\n    <SimpleForm>\n      <TextInput source=\"title\" />\n      <NumberInput source=\"rating\" validate={validateRating} />\n      <NumberInput source=\"servings\" />\n      <NumberInput source=\"duration\" />\n      <ReferenceInput source=\"category_id\" reference=\"categories\">\n        <SelectInput optionText=\"name\" />\n      </ReferenceInput>\n      <RichTextInput source=\"ingredients\" />\n      <RichTextInput source=\"directions\" />\n    </SimpleForm>\n  </Edit>\n)\n\nexport const RecipeCreate = (props) => (\n  <Create {...props}>\n    <SimpleForm>\n      <NumberInput source=\"rating\" />\n      <TextInput multiline source=\"ingredients\" />\n      <TextInput source=\"title\" />\n      <TextInput multiline source=\"directions\" />\n    </SimpleForm>\n  </Create>\n)\n","import React from 'react'\nimport {\n  DateField,\n  Filter,\n  SelectInput,\n  ReferenceInput,\n  Show,\n  NumberInput,\n  RichTextField,\n  ShowView,\n  SimpleShowLayout,\n  Create,\n  Edit,\n  TextInput,\n  SimpleForm,\n  NumberField,\n  List,\n  Datagrid,\n  TextField,\n} from 'react-admin'\n\nexport const CategoryCreate = (props) => (\n  <Create {...props}>\n    <SimpleForm>\n      <TextInput source=\"name\" />\n    </SimpleForm>\n  </Create>\n)\n\nexport const CategoryList = (props) => (\n  <List {...props}>\n    <Datagrid rowClick=\"edit\">\n      <TextField source=\"name\" />\n    </Datagrid>\n  </List>\n)\n\nexport const CategoryEdit = (props) => (\n  <Edit {...props}>\n    <SimpleForm>\n      <TextInput source=\"name\" />\n    </SimpleForm>\n  </Edit>\n)\n\nexport const CategoryShow = (props) => (\n  <Show {...props}>\n    <SimpleShowLayout>\n      <TextField source=\"name\" />\n      <DateField source=\"created_at\" />\n      <DateField source=\"updated_at\" />\n    </SimpleShowLayout>\n  </Show>\n)\n","export default {\n  // called when the user attempts to log in\n  login: ({ username, password }) => {\n    // Reject unless special username provided\n    if (username !== 'foodGoesNomNom') {\n      return Promise.reject()\n    }\n    // If somebody uses the special username they still won't know the password\n    // Thus the page will just keep spitting out an error\n    localStorage.setItem('key', password)\n    // Hack to force App to update to get the proper dataProvider\n    window.location.reload()\n    return Promise.resolve()\n  },\n  // called when the user clicks on the logout button\n  logout: () => {\n    localStorage.removeItem('key')\n    return Promise.resolve()\n  },\n  // called when the API returns an error\n  checkError: ({ status }) => {\n    if (status === 401 || status === 403) {\n      localStorage.removeItem('key')\n      return Promise.reject()\n    }\n    return Promise.resolve()\n  },\n  // called when the user navigates to a new location, to check for authentication\n  checkAuth: () => {\n    return localStorage.getItem('key') ? Promise.resolve() : Promise.reject()\n  },\n  // called when the user navigates to a new location, to check for permissions / roles\n  getPermissions: () => Promise.resolve(),\n}\n","import MenuBookIcon from '@material-ui/icons/MenuBook'\nimport CategoryIcon from '@material-ui/icons/Category'\nimport React, { Component } from 'react'\nimport buildHasuraProvider from 'ra-data-hasura-graphql'\nimport { Admin, Resource } from 'react-admin'\nimport ApolloClient from 'apollo-boost'\nimport { RecipeList, RecipeEdit, RecipeCreate, RecipeShow } from './components/recipes'\nimport { CategoryCreate, CategoryList, CategoryEdit, CategoryShow } from './components/categories'\nimport authProvider from './authProvider'\n\nconst preAuthDataProvider = {\n  getList: () => Promise.resolve({ data: [] }),\n  getOne: () => Promise.resolve(null),\n  getMany: () => Promise.resolve(null),\n  getManyReference: () => Promise.resolve(null),\n  create: () => Promise.resolve(null),\n  update: () => Promise.resolve(null),\n  updateMany: () => Promise.resolve(null),\n  delete: () => Promise.resolve(null),\n  deleteMany: () => Promise.resolve(null),\n}\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = { dataProvider: null }\n  }\n\n  async componentDidMount() {\n    const key = localStorage.getItem('key')\n    if (!key) {\n      this.setState({ dataProvider: preAuthDataProvider })\n      return\n    }\n    const headers = {\n      'content-type': 'application/json',\n      'x-hasura-admin-secret': key,\n    }\n    const client = new ApolloClient({\n      uri: 'https://floating-meadow-53258.herokuapp.com/v1/graphql',\n      headers,\n    })\n\n    const dataProvider = await buildHasuraProvider({ client })\n    this.setState({ dataProvider })\n  }\n\n  async componentDidUpdate() {\n    const key = localStorage.getItem('key')\n    const { dataProvider } = this.state\n    if (dataProvider === null && key) {\n      const headers = {\n        'content-type': 'application/json',\n        'x-hasura-admin-secret': key,\n      }\n      const client = new ApolloClient({\n        uri: 'https://floating-meadow-53258.herokuapp.com/v1/graphql',\n        headers,\n      })\n\n      const newDataProvider = await buildHasuraProvider({ client })\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({ dataProvider: newDataProvider })\n    }\n  }\n\n  render() {\n    const { dataProvider } = this.state\n\n    if (!dataProvider) {\n      return <div>Loading</div>\n    }\n\n    return (\n      <Admin dataProvider={dataProvider} authProvider={authProvider}>\n        <Resource\n          name=\"recipes\"\n          show={RecipeShow}\n          list={RecipeList}\n          edit={RecipeEdit}\n          create={RecipeCreate}\n          icon={MenuBookIcon}\n        />\n        <Resource\n          name=\"categories\"\n          show={CategoryShow}\n          list={CategoryList}\n          edit={CategoryEdit}\n          create={CategoryCreate}\n          icon={CategoryIcon}\n        />\n      </Admin>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { BrowserRouter } from \"react-router-dom\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}