{"version":3,"sources":["i18n.js","components/recipeViews/recipeShowTitle.jsx","components/stars.jsx","constants/stars.js","components/recipeViews/recipeShowHeader.jsx","components/recipeViews/recipeShowRichText.jsx","components/starRow.jsx","components/recipes.jsx","components/categories.jsx","authProvider.js","App.jsx","serviceWorker.js","index.js"],"names":["danishMessages","ra","navigation","page_rows_per_page","skip_nav","auth","user_menu","danishMsgs","useStyles","makeStyles","text","fontWeight","alignContent","fontSize","root","RecipeShowTitle","props","classes","record","className","title","Stars","rating","this","whiteStars","blackStars","Number","Array","map","_x","index","PureComponent","float","width","paddingBlock","RecipeShowHeader","translate","useTranslate","servings","duration_free","label","display","marginBottom","RecipeShowRichText","source","getLabel","RichTextField","StarRow","PostTitle","validateRating","number","minValue","maxValue","RecipeFilter","searchLabel","extraIngredient","Filter","TextInput","alwaysOn","ReferenceInput","reference","allowEmpty","SelectInput","optionText","PostPagination","Pagination","rowsPerPageOptions","RecipeList","List","filters","bulkActionButtons","perPage","pagination","Datagrid","rowClick","TextField","NumberField","ReferenceField","RecipeShow","Show","SimpleShowLayout","toolbarOptions","list","indent","direction","size","color","background","font","align","RecipeForm","SimpleForm","NumberInput","validate","toolbar","RecipeEdit","Edit","RecipeCreate","Create","CategoryCreate","CategoryList","CategoryEdit","CategoryShow","DateField","login","username","password","Promise","reject","localStorage","setItem","window","location","reload","resolve","logout","removeItem","checkError","status","checkAuth","getItem","getPermissions","messages","resources","recipes","name","fields","category_id","ingredients","directions","season","categories","created_at","updated_at","myroot","search","extra_ingredient","i18nProvider","polyglotI18nProvider","preAuthDataProvider","getList","data","getOne","getMany","getManyReference","create","update","updateMany","delete","deleteMany","App","state","dataProvider","a","key","setState","headers","client","ApolloClient","uri","buildHasuraProvider","newDataProvider","Admin","authProvider","Resource","show","edit","icon","MenuBookIcon","CategoryIcon","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5e54d360.chunk.js","sourcesContent":["import danishMessages from 'ra-language-danish'\n\n// Add missing translations to the Danish standard\ndanishMessages.ra.navigation.page_rows_per_page = 'Rækker per side'\ndanishMessages.ra.navigation.skip_nav = 'Skip nav' // not sure what this is\ndanishMessages.ra.auth.user_menu = 'Profil'\n\nexport const danishMsgs = danishMessages\n\nexport const domainMessages = {\n  resources: {\n    recipes: {\n      name: 'Opskrift |||| Opskrifter',\n      fields: {\n        title: 'Titel',\n        rating: 'Bedømmelse',\n        servings: 'Antal personer',\n        category_id: 'Kategori',\n        duration_free: 'Tid',\n        ingredients: 'Ingredienser',\n        directions: 'Fremgangsmåde',\n        season: 'Sæson',\n        source: 'Kilde',\n      },\n    },\n    categories: {\n      name: 'Kategori |||| Kategorier',\n      fields: {\n        name: 'Navn',\n        created_at: 'Oprettet d.',\n        updated_at: 'Opdateret d.',\n      },\n    },\n  },\n  myroot: {\n    servings: 'personer',\n    search: 'Søg',\n    extra_ingredient: 'Ekstra ingrediens',\n  },\n}\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles({\n  text: {\n    fontWeight: 'bold',\n    alignContent: 'center',\n    fontSize: '2rem',\n  },\n  root: {\n    'text-align': 'center',\n  },\n})\n\nconst RecipeShowTitle = (props) => {\n  const classes = useStyles()\n  const { record } = props\n  return (\n    <div className={classes.root}>\n      <span className={classes.text}>{record.title}</span>\n    </div>\n  )\n}\n\nexport default RecipeShowTitle\n","import React, { PureComponent } from 'react'\nimport { MAX_STARS } from '../constants/stars'\n\nclass Stars extends PureComponent {\n  render() {\n    const { rating } = this.props\n    let whiteStars = MAX_STARS\n    let blackStars = 0\n    if (rating) {\n      whiteStars = MAX_STARS - Number(rating)\n      blackStars = rating > MAX_STARS ? MAX_STARS : rating\n    }\n    if (whiteStars < 0) {\n      whiteStars = 0\n    }\n    return rating ? (\n      <span>\n        {[...Array(blackStars)].map((_x, index) => (\n          <span key={index}>★</span>\n        ))}\n        {[...Array(whiteStars)].map((_x, index) => (\n          <span key={index}>☆</span>\n        ))}\n      </span>\n    ) : (\n      ''\n    )\n  }\n}\n\nexport default Stars\n","export const MAX_STARS = 5\n","/* eslint-disable camelcase */\nimport React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { useTranslate } from 'react-admin'\nimport Stars from '../stars'\n\nconst useStyles = makeStyles({\n  'text-left': {\n    float: 'left',\n    'text-align': 'left',\n    width: '33%',\n  },\n  'text-center': {\n    float: 'left',\n    'text-align': 'center',\n    width: '34%',\n  },\n  'text-right': {\n    float: 'left',\n    'text-align': 'right',\n    width: '33%',\n  },\n  root: {\n    paddingBlock: '3rem',\n  },\n})\n\nconst RecipeShowHeader = (props) => {\n  const translate = useTranslate()\n  const classes = useStyles()\n  const { record } = props\n  const { rating, servings, duration_free } = record\n  return (\n    <div className={classes.root}>\n      <span className={classes['text-left']}>\n        <Stars rating={rating} />\n      </span>\n      {servings && (\n        <span className={classes['text-center']}>\n          {servings} {translate('myroot.servings')}\n        </span>\n      )}\n      {duration_free && <span className={classes['text-right']}>{duration_free}</span>}\n    </div>\n  )\n}\n\nexport default RecipeShowHeader\n","import React from 'react'\nimport { RichTextField, useTranslate } from 'react-admin'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles({\n  label: {\n    fontWeight: 'bold',\n    fontSize: '1.25rem',\n    display: 'block',\n    marginBottom: '0.75rem',\n  },\n  root: {\n    paddingBlock: '1rem',\n  },\n})\n\nconst RecipeShowRichText = (props) => {\n  const translate = useTranslate()\n  const getLabel = (source) =>\n    source === 'ingredients'\n      ? translate('resources.recipes.fields.ingredients')\n      : translate('resources.recipes.fields.directions')\n  const classes = useStyles()\n  const { source } = props\n  return (\n    <div className={classes.root}>\n      <span className={classes.label}>{getLabel(source)}</span>\n      <RichTextField source {...props} />\n    </div>\n  )\n}\n\nexport default RecipeShowRichText\n","import React, { PureComponent } from 'react'\nimport Stars from './stars'\n\nclass StarRow extends PureComponent {\n  render() {\n    const { record } = this.props\n    const { rating } = record\n    return <Stars rating={rating} />\n  }\n}\n\nexport default StarRow\n","import React from 'react'\nimport {\n  minValue,\n  maxValue,\n  number,\n  ReferenceField,\n  Filter,\n  SelectInput,\n  ReferenceInput,\n  Show,\n  NumberInput,\n  SimpleShowLayout,\n  Create,\n  Edit,\n  TextInput,\n  SimpleForm,\n  NumberField,\n  List,\n  Datagrid,\n  TextField,\n  Pagination,\n  useTranslate,\n} from 'react-admin'\nimport RichTextInput from 'ra-input-rich-text'\nimport RecipeShowTitle from './recipeViews/recipeShowTitle'\nimport RecipeShowHeader from './recipeViews/recipeShowHeader'\nimport RecipeShowRichText from './recipeViews/recipeShowRichText'\nimport StarRow from './starRow'\n\nconst PostTitle = ({ record }) => {\n  return <span>{record ? `${record.title}` : ''}</span>\n}\nconst validateRating = [number(), minValue(1), maxValue(5)]\n\nconst RecipeFilter = (props) => {\n  const translate = useTranslate()\n  const searchLabel = translate('myroot.search')\n  const extraIngredient = translate('myroot.extra_ingredient')\n  // The data provider:\n  // https://github.com/Steams/ra-data-hasura-graphql/blob/d65d6326b8d74d7acb85d60f5c60733470c78eba/src/buildVariables.js#L33\n  // Transforms filters with multiple items (comma separated) into 'or' queries, while single items are transformed into 'and' queries\n  // Using the extra ingredient search therefore forces that ingredient to be present since it is added as a single 'and' query and not just added to the main 'or' query\n  // The main search field still needs to match one of title, ingredient and season\n  // It's not possible to add multiple search filters with the same source\n  // It's not possible to add multiple search filters with the same source in a list, they would be overwritten by the last entry, in the 'or' query\n  return (\n    <Filter {...props}>\n      <TextInput label={searchLabel} source=\"title@_ilike,ingredients@_ilike,season@_ilike\" alwaysOn />\n      <TextInput label={extraIngredient} source=\"ingredients@_ilike\" />\n      <ReferenceInput source=\"category_id\" reference=\"categories\" allowEmpty>\n        <SelectInput optionText=\"name\" />\n      </ReferenceInput>\n    </Filter>\n  )\n}\n\nconst PostPagination = (props) => <Pagination rowsPerPageOptions={[10, 25, 50, 100]} {...props} />\n\nexport const RecipeList = (props) => (\n  <List {...props} filters={<RecipeFilter />} bulkActionButtons={false} perPage={100} pagination={<PostPagination />}>\n    <Datagrid rowClick=\"show\">\n      <TextField source=\"title\" />\n      <StarRow source=\"rating\" />\n      <NumberField source=\"servings\" />\n      <ReferenceField source=\"category_id\" reference=\"categories\">\n        <TextField source=\"name\" />\n      </ReferenceField>\n    </Datagrid>\n  </List>\n)\n\nexport const RecipeShow = (props) => (\n  <Show {...props} title={<PostTitle />}>\n    <SimpleShowLayout>\n      <RecipeShowTitle source=\"title\" />\n      <RecipeShowHeader />\n      <RecipeShowRichText source=\"ingredients\" {...props} />\n      <RecipeShowRichText source=\"directions\" {...props} />\n      <TextField source=\"season\" />\n      <TextField source=\"source\" />\n    </SimpleShowLayout>\n  </Show>\n)\n\nconst toolbarOptions = [\n  ['bold', 'italic', 'underline', 'strike'], // toggled buttons\n\n  [{ list: 'ordered' }, { list: 'bullet' }],\n  [{ indent: '-1' }, { indent: '+1' }], // outdent/indent\n  [{ direction: 'rtl' }], // text direction\n\n  [{ size: ['small', false, 'large', 'huge'] }], // custom dropdown\n\n  [{ color: [] }, { background: [] }], // dropdown with defaults from theme\n  [{ font: [] }],\n  [{ align: [] }],\n  ['clean'],\n]\n\nconst RecipeForm = () => (\n  <SimpleForm>\n    <TextInput source=\"title\" />\n    <NumberInput source=\"rating\" validate={validateRating} />\n    <NumberInput source=\"servings\" />\n    <TextInput source=\"duration_free\" />\n    <ReferenceInput source=\"category_id\" reference=\"categories\">\n      <SelectInput optionText=\"name\" />\n    </ReferenceInput>\n    <RichTextInput source=\"ingredients\" toolbar={toolbarOptions} />\n    <RichTextInput source=\"directions\" toolbar={toolbarOptions} />\n    <TextInput source=\"season\" />\n    <TextInput source=\"source\" />\n  </SimpleForm>\n)\n\nexport const RecipeEdit = (props) => (\n  <Edit {...props} title={<PostTitle />}>\n    {RecipeForm()}\n  </Edit>\n)\n\nexport const RecipeCreate = (props) => (\n  <Create {...props} title={<PostTitle />}>\n    {RecipeForm()}\n  </Create>\n)\n","import React from 'react'\nimport {\n  DateField,\n  Show,\n  SimpleShowLayout,\n  Create,\n  Edit,\n  TextInput,\n  SimpleForm,\n  List,\n  Datagrid,\n  TextField,\n} from 'react-admin'\n\nexport const CategoryCreate = (props) => (\n  <Create {...props}>\n    <SimpleForm>\n      <TextInput source=\"name\" />\n    </SimpleForm>\n  </Create>\n)\n\nexport const CategoryList = (props) => (\n  <List {...props}>\n    <Datagrid rowClick=\"edit\">\n      <TextField source=\"name\" />\n    </Datagrid>\n  </List>\n)\n\nexport const CategoryEdit = (props) => (\n  <Edit {...props}>\n    <SimpleForm>\n      <TextInput source=\"name\" />\n    </SimpleForm>\n  </Edit>\n)\n\nexport const CategoryShow = (props) => (\n  <Show {...props}>\n    <SimpleShowLayout>\n      <TextField source=\"name\" />\n      <DateField source=\"created_at\" />\n      <DateField source=\"updated_at\" />\n    </SimpleShowLayout>\n  </Show>\n)\n","export default {\n  // called when the user attempts to log in\n  login: ({ username, password }) => {\n    // Reject unless special username provided\n    if (username !== 'foodGoesNomNom') {\n      return Promise.reject()\n    }\n    // If somebody uses the special username they still won't know the password\n    // Thus the page will just keep spitting out an error\n    localStorage.setItem('key', password)\n    // Hack to force App to update to get the proper dataProvider\n    window.location.reload()\n    return Promise.resolve()\n  },\n  // called when the user clicks on the logout button\n  logout: () => {\n    localStorage.removeItem('key')\n    return Promise.resolve()\n  },\n  // called when the API returns an error\n  checkError: ({ status }) => {\n    if (status === 401 || status === 403) {\n      localStorage.removeItem('key')\n      return Promise.reject()\n    }\n    return Promise.resolve()\n  },\n  // called when the user navigates to a new location, to check for authentication\n  checkAuth: () => {\n    return localStorage.getItem('key') ? Promise.resolve() : Promise.reject()\n  },\n  // called when the user navigates to a new location, to check for permissions / roles\n  getPermissions: () => Promise.resolve(),\n}\n","import MenuBookIcon from '@material-ui/icons/MenuBook'\nimport CategoryIcon from '@material-ui/icons/Category'\nimport React, { Component } from 'react'\nimport buildHasuraProvider from 'ra-data-hasura-graphql'\nimport { Admin, Resource } from 'react-admin'\nimport ApolloClient from 'apollo-boost'\nimport polyglotI18nProvider from 'ra-i18n-polyglot'\nimport { domainMessages, danishMsgs } from './i18n'\nimport { RecipeList, RecipeEdit, RecipeCreate, RecipeShow } from './components/recipes'\nimport { CategoryCreate, CategoryList, CategoryEdit, CategoryShow } from './components/categories'\nimport authProvider from './authProvider'\n\nconst messages = { ...danishMsgs, ...domainMessages }\nconst i18nProvider = polyglotI18nProvider(() => messages)\n\nconst preAuthDataProvider = {\n  getList: () => Promise.resolve({ data: [] }),\n  getOne: () => Promise.resolve(null),\n  getMany: () => Promise.resolve(null),\n  getManyReference: () => Promise.resolve(null),\n  create: () => Promise.resolve(null),\n  update: () => Promise.resolve(null),\n  updateMany: () => Promise.resolve(null),\n  delete: () => Promise.resolve(null),\n  deleteMany: () => Promise.resolve(null),\n}\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = { dataProvider: null }\n  }\n\n  async componentDidMount() {\n    const key = localStorage.getItem('key')\n    if (!key) {\n      this.setState({ dataProvider: preAuthDataProvider })\n      return\n    }\n    const headers = {\n      'content-type': 'application/json',\n      'x-hasura-admin-secret': key,\n    }\n    const client = new ApolloClient({\n      uri: 'https://floating-meadow-53258.herokuapp.com/v1/graphql',\n      headers,\n    })\n\n    const dataProvider = await buildHasuraProvider({ client })\n    this.setState({ dataProvider })\n  }\n\n  async componentDidUpdate() {\n    const key = localStorage.getItem('key')\n    const { dataProvider } = this.state\n    if (dataProvider === null && key) {\n      const headers = {\n        'content-type': 'application/json',\n        'x-hasura-admin-secret': key,\n      }\n      const client = new ApolloClient({\n        uri: 'https://floating-meadow-53258.herokuapp.com/v1/graphql',\n        headers,\n      })\n\n      const newDataProvider = await buildHasuraProvider({ client })\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({ dataProvider: newDataProvider })\n    }\n  }\n\n  render() {\n    const { dataProvider } = this.state\n\n    if (!dataProvider) {\n      return <div>Loading</div>\n    }\n\n    return (\n      <Admin dataProvider={dataProvider} authProvider={authProvider} i18nProvider={i18nProvider}>\n        <Resource\n          name=\"recipes\"\n          show={RecipeShow}\n          list={RecipeList}\n          edit={RecipeEdit}\n          create={RecipeCreate}\n          icon={MenuBookIcon}\n        />\n        <Resource\n          name=\"categories\"\n          show={CategoryShow}\n          list={CategoryList}\n          edit={CategoryEdit}\n          create={CategoryCreate}\n          icon={CategoryIcon}\n        />\n      </Admin>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { BrowserRouter } from 'react-router-dom'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}