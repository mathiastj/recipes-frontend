{"version":3,"sources":["components/recipeViews/recipeShowTitle.js","components/stars.js","constants/stars.js","components/recipeViews/recipeShowHeader.js","components/starRow.js","components/recipes.js","components/categories.js","authProvider.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","text","fontWeight","alignContent","root","RecipeShowTitle","props","classes","className","record","title","Stars","rating","this","whiteStars","blackStars","Number","Array","map","ele","Component","float","width","paddingBlock","RecipeShowHeader","servings","duration","StarRow","PostTitle","RecipeFilter","Filter","TextInput","label","source","alwaysOn","ReferenceInput","reference","allowEmpty","SelectInput","optionText","RecipeList","List","filters","bulkActionButtons","Datagrid","rowClick","TextField","NumberField","ReferenceField","RecipeShow","Show","SimpleShowLayout","RichTextField","component","validateRating","number","minValue","maxValue","RecipeEdit","Edit","SimpleForm","NumberInput","validate","RecipeCreate","Create","multiline","CategoryCreate","CategoryList","CategoryEdit","CategoryShow","DateField","login","username","password","Promise","reject","localStorage","setItem","window","location","reload","resolve","logout","removeItem","checkError","status","checkAuth","getItem","getPermissions","preAuthDataProvider","getList","resource","params","data","getOne","getMany","getManyReference","create","update","updateMany","delete","deleteMany","App","state","dataProvider","key","setState","headers","client","ApolloClient","uri","buildHasuraProvider","Admin","authProvider","Resource","name","show","list","edit","icon","MenuBookIcon","CategoryIcon","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+hBAGMA,EAAYC,YAAW,CACzBC,KAAM,CACJC,WAAY,OACZC,aAAc,UAEhBC,KAAM,CACJ,aAAc,YAaLC,EATS,SAAAC,GACpB,IAAMC,EAAUR,IAChB,OACE,yBAAKS,UAAWD,EAAQH,MACtB,0BAAMI,UAAWD,EAAQN,MAAOK,EAAMG,OAAOC,S,QCOtCC,E,uKApBH,IACAC,EAAWC,KAAKP,MAAhBM,OACJE,ECNiB,EDOjBC,EAAa,EAQjB,OAPIH,IACFE,ECTmB,EDSME,OAAOJ,GAChCG,EAAaH,ECVM,IDU2BA,GAE5CE,EAAa,IACfA,EAAa,GAEPF,EAAS,8BACR,YAAIK,MAAMF,IAAaG,KAAI,SAAAC,GAAG,OAAI,2CAElC,YAAIF,MAAMH,IAAaI,KAAI,SAAAC,GAAG,OAAI,4CAE3B,O,GAjBAC,aECdrB,EAAYC,YAAW,CACzB,YAAa,CACXqB,MAAO,OACP,aAAc,OACdC,MAAO,OAGT,cAAe,CACbD,MAAO,OACP,aAAc,SACdC,MAAO,OAET,aAAc,CACZD,MAAO,OACP,aAAc,QACdC,MAAO,OAETlB,KAAM,CACJmB,aAAc,UAiBLC,EAbU,SAAAlB,GACrB,IAAMC,EAAUR,IAChB,OACE,yBAAKS,UAAWD,EAAQH,MACtB,0BAAMI,UAAWD,EAAQ,cACvB,kBAAC,EAAD,CAAOK,OAAQN,EAAMG,OAAOG,UAE9B,0BAAMJ,UAAWD,EAAQ,gBAAiBD,EAAMG,OAAOgB,SAAvD,aACA,0BAAMjB,UAAWD,EAAQ,eAAgBD,EAAMG,OAAOiB,SAAtD,cCtBOC,E,uKARH,IACAf,EAAWC,KAAKP,MAAMG,OAAtBG,OACR,OACI,kBAAC,EAAD,CAAOA,OAAQA,Q,GAJDQ,aCIhBQ,EAAY,SAAC,GAAgB,IAAdnB,EAAa,EAAbA,OACnB,OAAO,8BAAOA,EAAM,UAAMA,EAAOC,OAAU,KAGvCmB,EAAe,SAACvB,GAAD,OACnB,kBAACwB,EAAA,EAAWxB,EACR,kBAACyB,EAAA,EAAD,CAAWC,MAAM,gBAAgBC,OAAO,QAAQC,UAAQ,IACxD,kBAACH,EAAA,EAAD,CAAWC,MAAM,qBAAqBC,OAAO,cAAcC,UAAQ,IACnE,kBAACC,EAAA,EAAD,CAAgBH,MAAM,WAAWC,OAAO,cAAcG,UAAU,aAAaC,YAAU,GACnF,kBAACC,EAAA,EAAD,CAAaC,WAAW,YAKrBC,EAAa,SAAAlC,GAAK,OAC3B,kBAACmC,EAAA,EAAD,iBAAUnC,EAAV,CAAiBoC,QAAS,kBAAC,EAAD,MAAiBC,mBAAmB,IAC1D,kBAACC,EAAA,EAAD,CAAUC,SAAS,QACf,kBAACC,EAAA,EAAD,CAAWb,OAAO,UAClB,kBAAC,EAAD,CAASA,OAAO,WAChB,kBAACc,EAAA,EAAD,CAAad,OAAO,aACpB,kBAACe,EAAA,EAAD,CAAgBf,OAAO,cAAcG,UAAU,cAC7C,kBAACU,EAAA,EAAD,CAAWb,OAAO,aAQnBgB,EAAa,SAAA3C,GAAK,OAC7B,kBAAC4C,EAAA,EAAD,iBAAU5C,EAAV,CAAiBI,MAAO,kBAAC,EAAD,QACpB,kBAACyC,EAAA,EAAD,KACI,kBAAC,EAAD,CAAiBlB,OAAO,UACxB,kBAAC,EAAD,MACA,kBAACmB,EAAA,EAAD,CAAeC,UAAU,MAAMpB,OAAO,gBACtC,kBAACmB,EAAA,EAAD,CAAeC,UAAU,MAAMpB,OAAO,kBAK1CqB,EAAiB,CAACC,cAAUC,YAAS,GAAIC,YAAS,IAE3CC,GAAa,SAAApD,GAAK,OAC7B,kBAACqD,EAAA,EAASrD,EACN,kBAACsD,EAAA,EAAD,KACI,kBAAC7B,EAAA,EAAD,CAAWE,OAAO,UAClB,kBAAC4B,EAAA,EAAD,CAAa5B,OAAO,SAAS6B,SAAUR,IACvC,kBAACO,EAAA,EAAD,CAAa5B,OAAO,aACpB,kBAAC4B,EAAA,EAAD,CAAa5B,OAAO,aACpB,kBAACE,EAAA,EAAD,CAAgBF,OAAO,cAAcG,UAAU,cAC1C,kBAACE,EAAA,EAAD,CAAaC,WAAW,UAE7B,kBAAC,IAAD,CAAeN,OAAO,gBACtB,kBAAC,IAAD,CAAeA,OAAO,kBAKnB8B,GAAe,SAAAzD,GAAK,OAC/B,kBAAC0D,EAAA,EAAW1D,EACR,kBAACsD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAa5B,OAAO,WACpB,kBAACF,EAAA,EAAD,CAAWkC,WAAS,EAAChC,OAAO,gBAC5B,kBAACF,EAAA,EAAD,CAAWE,OAAO,UAClB,kBAACF,EAAA,EAAD,CAAWkC,WAAS,EAAChC,OAAO,kB,UCpEzBiC,GAAiB,SAAA5D,GAAK,OACjC,kBAAC0D,EAAA,EAAW1D,EACR,kBAACsD,EAAA,EAAD,KACI,kBAAC7B,EAAA,EAAD,CAAWE,OAAO,YAKfkC,GAAe,SAAA7D,GAAK,OAC/B,kBAACmC,EAAA,EAASnC,EACN,kBAACsC,EAAA,EAAD,CAAUC,SAAS,QACf,kBAACC,EAAA,EAAD,CAAWb,OAAO,YAKfmC,GAAe,SAAA9D,GAAK,OAC/B,kBAACqD,EAAA,EAASrD,EACN,kBAACsD,EAAA,EAAD,KACI,kBAAC7B,EAAA,EAAD,CAAWE,OAAO,YAKfoC,GAAe,SAAA/D,GAAK,OAC/B,kBAAC4C,EAAA,EAAS5C,EACN,kBAAC6C,EAAA,EAAD,KACI,kBAACL,EAAA,EAAD,CAAWb,OAAO,SAClB,kBAACqC,GAAA,EAAD,CAAWrC,OAAO,eAClB,kBAACqC,GAAA,EAAD,CAAWrC,OAAO,kBChCb,IAEbsC,MAAO,YAA6B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAElB,MAAiB,mBAAbD,EACKE,QAAQC,UAIjBC,aAAaC,QAAQ,MAAOJ,GAE5BK,OAAOC,SAASC,SACTN,QAAQO,YAGjBC,OAAQ,WAEJ,OADAN,aAAaO,WAAW,OACjBT,QAAQO,WAGnBG,WAAY,YAAiB,IAAdC,EAAa,EAAbA,OACX,OAAe,MAAXA,GAA6B,MAAXA,GAClBT,aAAaO,WAAW,OACjBT,QAAQC,UAEZD,QAAQO,WAGnBK,UAAW,WACP,OAAOV,aAAaW,QAAQ,OACtBb,QAAQO,UACRP,QAAQC,UAGlBa,eAAgB,kBAAMd,QAAQO,Y,UCxB1BQ,GAAsB,CAC1BC,QAAY,SAACC,EAAUC,GAAX,OAAsBlB,QAAQO,QAAQ,CAACY,KAAM,MACzDC,OAAY,SAACH,EAAUC,GAAX,OAAsBlB,QAAQO,QAAQ,OAClDc,QAAY,SAACJ,EAAUC,GAAX,OAAsBlB,QAAQO,QAAQ,OAClDe,iBAAkB,SAACL,EAAUC,GAAX,OAAsBlB,QAAQO,QAAQ,OACxDgB,OAAY,SAACN,EAAUC,GAAX,OAAsBlB,QAAQO,QAAQ,OAClDiB,OAAY,SAACP,EAAUC,GAAX,OAAsBlB,QAAQO,QAAQ,OAClDkB,WAAY,SAACR,EAAUC,GAAX,OAAsBlB,QAAQO,QAAQ,OAClDmB,OAAY,SAACT,EAAUC,GAAX,OAAsBlB,QAAQO,QAAQ,OAClDoB,WAAY,SAACV,EAAUC,GAAX,OAAsBlB,QAAQO,QAAQ,QAoDrCqB,G,kDA/Cb,aAAe,IAAD,8BACV,gBACKC,MAAQ,CAAEC,aAAc,MAFnB,E,yLAKNC,EAAM7B,aAAaW,QAAQ,O,uBAE/B1E,KAAK6F,SAAS,CAAEF,aAAcf,K,iCAG1BkB,EAAU,CAAC,eAAgB,mBAAoB,wBAAyBF,GACxEG,EAAS,IAAIC,KAAa,CAACC,IAAK,yDAA0DH,QAASA,I,SAE9EI,IAAoB,CAAEH,OAAQA,I,OAAnDJ,E,OACN3F,KAAK6F,SAAS,CAAEF,iB,2QAIVC,EAAM7B,aAAaW,QAAQ,OACD,OAA5B1E,KAAK0F,MAAMC,eAAyBC,E,uBAChCE,EAAU,CAAC,eAAgB,mBAAoB,wBAAyBF,GACxEG,EAAS,IAAIC,KAAa,CAACC,IAAK,yDAA0DH,QAASA,I,SAE9EI,IAAoB,CAAEH,OAAQA,I,OAAnDJ,E,OACN3F,KAAK6F,SAAS,CAAEF,iB,qIAIV,IACEA,EAAiB3F,KAAK0F,MAAtBC,aAER,OAAKA,EAKH,kBAACQ,EAAA,EAAD,CACAR,aAAcA,EACdS,aAAcA,IAEZ,kBAACC,EAAA,EAAD,CAAUC,KAAK,UAAUC,KAAMnE,EAAYoE,KAAM7E,EAAY8E,KAAM5D,GAAYuC,OAAQlC,GAAcwD,KAAMC,MAC3G,kBAACN,EAAA,EAAD,CAAUC,KAAK,aAAaC,KAAM/C,GAAcgD,KAAMlD,GAAcmD,KAAMlD,GAAc6B,OAAQ/B,GAAgBqD,KAAME,OAT/G,4C,GAjCCrG,aCXEsG,QACW,cAA7B5C,OAAOC,SAAS4C,UAEe,UAA7B7C,OAAOC,SAAS4C,UAEhB7C,OAAOC,SAAS4C,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,GAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3dfae70c.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n    text: {\n      fontWeight: 'bold',\n      alignContent: 'center'\n    },\n    root: {\n      \"text-align\": 'center',\n    }\n});\n\nconst RecipeShowTitle = props => {\n    const classes = useStyles();\n    return (\n      <div className={classes.root}>\n        <span className={classes.text}>{props.record.title}</span>\n      </div>\n    )\n}\n\nexport default RecipeShowTitle;","import React, {Component} from 'react';\nimport { MAX_STARS } from '../constants/stars'\n\nclass Stars extends Component {\n  render() {\n    const { rating } = this.props\n    let whiteStars = MAX_STARS\n    let blackStars = 0\n    if (rating) {\n      whiteStars = MAX_STARS - Number(rating)\n      blackStars = rating > MAX_STARS ? MAX_STARS : rating\n    }\n    if (whiteStars < 0) {\n      whiteStars = 0\n    }\n    return (rating ? <span>\n            {[...Array(blackStars)].map(ele => <span>★</span>\n              )}\n            {[...Array(whiteStars)].map(ele => <span>☆</span>\n              )}\n          </span> : '')\n  }\n}\n\nexport default Stars;","export const MAX_STARS = 5","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Stars from '../stars'\n\nconst useStyles = makeStyles({\n    \"text-left\": {\n      float: 'left',\n      'text-align': 'left',\n      width: '33%'\n\n    },\n    \"text-center\": {\n      float: 'left',\n      'text-align': 'center',\n      width: '34%'\n    },\n    \"text-right\": {\n      float: 'left',\n      'text-align': 'right',\n      width: '33%'\n    },\n    root: {\n      paddingBlock: '2rem'\n    }\n});\n\nconst RecipeShowHeader = props => {\n    const classes = useStyles();\n    return (\n      <div className={classes.root}>\n        <span className={classes[\"text-left\"]}>\n          <Stars rating={props.record.rating}/>\n        </span>\n        <span className={classes[\"text-center\"]}>{props.record.servings} servings</span>\n        <span className={classes[\"text-right\"]}>{props.record.duration} minutes</span>\n      </div>\n    )\n}\n\nexport default RecipeShowHeader;","import React, {Component} from 'react';\nimport Stars from './stars'\n\nclass StarRow extends Component {\n  render() {\n    const { rating } = this.props.record\n    return (\n        <Stars rating={rating}/>\n    )\n  }\n}\n\nexport default StarRow;","import React from 'react';\nimport { minValue, maxValue, number, ReferenceField, Filter, SelectInput, ReferenceInput, Show, NumberInput, RichTextField, ShowView, SimpleShowLayout, Create, Edit, TextInput, SimpleForm, NumberField, List, Datagrid, TextField } from 'react-admin';\nimport RichTextInput from 'ra-input-rich-text';\nimport RecipeShowTitle from './recipeViews/recipeShowTitle'\nimport RecipeShowHeader from './recipeViews/recipeShowHeader'\nimport StarRow from './starRow'\n\nconst PostTitle = ({ record }) => {\n  return <span>{record ? `${record.title}` : ''}</span>;\n};\n\nconst RecipeFilter = (props) => (\n  <Filter {...props}>\n      <TextInput label=\"Search titles\" source=\"title\" alwaysOn />\n      <TextInput label=\"Search ingredients\" source=\"ingredients\" alwaysOn />\n      <ReferenceInput label=\"Category\" source=\"category_id\" reference=\"categories\" allowEmpty>\n          <SelectInput optionText=\"name\" />\n      </ReferenceInput>\n  </Filter>\n);\n\nexport const RecipeList = props => (\n    <List {...props} filters={<RecipeFilter/>} bulkActionButtons={false}>\n        <Datagrid rowClick=\"show\">\n            <TextField source=\"title\" />\n            <StarRow source=\"rating\"/>\n            <NumberField source=\"servings\" />\n            <ReferenceField source=\"category_id\" reference=\"categories\">\n              <TextField source=\"name\" />\n            </ReferenceField>\n        </Datagrid>\n    </List>\n);\n\n\n\nexport const RecipeShow = props => (\n  <Show {...props} title={<PostTitle/>}>\n      <SimpleShowLayout>\n          <RecipeShowTitle source=\"title\"/>\n          <RecipeShowHeader />\n          <RichTextField component=\"pre\" source=\"ingredients\" />\n          <RichTextField component=\"pre\" source=\"directions\" />\n      </SimpleShowLayout>\n  </Show>\n);\n\nconst validateRating = [number(), minValue(1), maxValue(5)]\n\nexport const RecipeEdit = props => (\n  <Edit {...props}>\n      <SimpleForm>\n          <TextInput source=\"title\" />\n          <NumberInput source=\"rating\" validate={validateRating}/>\n          <NumberInput source=\"servings\" />\n          <NumberInput source=\"duration\" />\n          <ReferenceInput source=\"category_id\" reference=\"categories\">\n               <SelectInput optionText=\"name\" />\n            </ReferenceInput>\n          <RichTextInput source=\"ingredients\" />\n          <RichTextInput source=\"directions\" />\n      </SimpleForm>\n  </Edit>\n);\n\nexport const RecipeCreate = props => (\n  <Create {...props}>\n      <SimpleForm>\n          <NumberInput source=\"rating\" />\n          <TextInput multiline source=\"ingredients\" />\n          <TextInput source=\"title\" />\n          <TextInput multiline source=\"directions\" />\n      </SimpleForm>\n  </Create>\n);\n","import React from 'react';\nimport { DateField, Filter, SelectInput, ReferenceInput, Show, NumberInput, RichTextField, ShowView, SimpleShowLayout, Create, Edit, TextInput, SimpleForm, NumberField, List, Datagrid, TextField } from 'react-admin';\n\nexport const CategoryCreate = props => (\n  <Create {...props}>\n      <SimpleForm>\n          <TextInput source=\"name\" />\n      </SimpleForm>\n  </Create>\n);\n\nexport const CategoryList = props => (\n  <List {...props}>\n      <Datagrid rowClick=\"edit\">\n          <TextField source=\"name\" />\n      </Datagrid>\n  </List>\n);\n\nexport const CategoryEdit = props => (\n  <Edit {...props}>\n      <SimpleForm>\n          <TextInput source=\"name\" />\n      </SimpleForm>\n  </Edit>\n);\n\nexport const CategoryShow = props => (\n  <Show {...props}>\n      <SimpleShowLayout>\n          <TextField source=\"name\" />\n          <DateField source=\"created_at\" />\n          <DateField source=\"updated_at\" />\n      </SimpleShowLayout>\n  </Show>\n);","export default {\n  // called when the user attempts to log in\n  login: ({ username, password }) => {\n    // Reject unless special username provided\n    if (username !== 'foodGoesNomNom') {\n      return Promise.reject()\n    }\n    // If somebody uses the special username they still won't know the password\n    // Thus the page will just keep spitting out an error\n    localStorage.setItem('key', password);\n    // Hack to force App to update to get the proper dataProvider\n    window.location.reload()\n    return Promise.resolve();\n  },\n  // called when the user clicks on the logout button\n  logout: () => {\n      localStorage.removeItem('key');\n      return Promise.resolve();\n  },\n  // called when the API returns an error\n  checkError: ({ status }) => {\n      if (status === 401 || status === 403) {\n          localStorage.removeItem('key');\n          return Promise.reject();\n      }\n      return Promise.resolve();\n  },\n  // called when the user navigates to a new location, to check for authentication\n  checkAuth: () => {\n      return localStorage.getItem('key')\n          ? Promise.resolve()\n          : Promise.reject();\n  },\n  // called when the user navigates to a new location, to check for permissions / roles\n  getPermissions: () => Promise.resolve(),\n};","import MenuBookIcon from '@material-ui/icons/MenuBook';\nimport CategoryIcon from '@material-ui/icons/Category';\nimport React, {Component} from 'react';\nimport buildHasuraProvider from 'ra-data-hasura-graphql';\nimport { Admin, Resource, EditGuesser, ListGuesser, ShowGuesser } from 'react-admin';\nimport {RecipeList, RecipeEdit, RecipeCreate, RecipeShow } from './components/recipes'\nimport {CategoryCreate, CategoryList, CategoryEdit, CategoryShow } from './components/categories'\nimport authProvider from './authProvider'\nimport ApolloClient from 'apollo-boost'\n\nconst preAuthDataProvider = {\n  getList:    (resource, params) => Promise.resolve({data: []}),\n  getOne:     (resource, params) => Promise.resolve(null),\n  getMany:    (resource, params) => Promise.resolve(null),\n  getManyReference: (resource, params) => Promise.resolve(null),\n  create:     (resource, params) => Promise.resolve(null),\n  update:     (resource, params) => Promise.resolve(null),\n  updateMany: (resource, params) => Promise.resolve(null),\n  delete:     (resource, params) => Promise.resolve(null),\n  deleteMany: (resource, params) => Promise.resolve(null),\n}\n\n\nclass App extends Component {\n  constructor() {\n      super();\n      this.state = { dataProvider: null};\n  }\n  async componentDidMount() {\n    const key = localStorage.getItem('key')\n    if (!key) {\n      this.setState({ dataProvider: preAuthDataProvider })\n      return\n    }\n    const headers = {'content-type': 'application/json', 'x-hasura-admin-secret': key}; \n    const client = new ApolloClient({uri: 'https://floating-meadow-53258.herokuapp.com/v1/graphql', headers: headers});\n\n    const dataProvider = await buildHasuraProvider({ client: client })\n    this.setState({ dataProvider })\n  }\n\n  async componentDidUpdate() {\n    const key = localStorage.getItem('key')\n    if (this.state.dataProvider === null && key) {\n      const headers = {'content-type': 'application/json', 'x-hasura-admin-secret': key}; \n      const client = new ApolloClient({uri: 'https://floating-meadow-53258.herokuapp.com/v1/graphql', headers: headers});\n  \n      const dataProvider = await buildHasuraProvider({ client: client })\n      this.setState({ dataProvider })\n    }\n  }\n\n  render() {\n      const { dataProvider } = this.state;\n\n      if (!dataProvider) {\n          return <div>Loading</div>;\n      }\n\n      return (\n        <Admin\n        dataProvider={dataProvider}\n        authProvider={authProvider}\n        >\n          <Resource name=\"recipes\" show={RecipeShow} list={RecipeList} edit={RecipeEdit} create={RecipeCreate} icon={MenuBookIcon}/>\n          <Resource name=\"categories\" show={CategoryShow} list={CategoryList} edit={CategoryEdit} create={CategoryCreate} icon={CategoryIcon}/>\n        </Admin>\n      );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { BrowserRouter } from \"react-router-dom\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}