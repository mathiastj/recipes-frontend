{"version":3,"sources":["i18n.js","components/recipeViews/recipeShowTitle.jsx","components/stars.jsx","constants/stars.js","components/recipeViews/recipeShowHeader.jsx","components/recipeViews/recipeShowRichText.jsx","components/starRow.jsx","components/recipes.jsx","components/categories.jsx","authProvider.js","App.jsx","serviceWorker.js","index.js"],"names":["danishMessages","ra","navigation","page_rows_per_page","auth","user_menu","danishMsgs","useStyles","makeStyles","text","fontWeight","alignContent","fontSize","root","RecipeShowTitle","props","classes","record","className","title","Stars","rating","this","whiteStars","blackStars","Number","Array","map","PureComponent","float","width","paddingBlock","RecipeShowHeader","translate","useTranslate","servings","duration_free","label","display","marginBottom","RecipeShowRichText","source","getLabel","RichTextField","StarRow","PostTitle","validateRating","number","minValue","maxValue","RecipeFilter","Filter","TextInput","alwaysOn","ReferenceInput","reference","allowEmpty","SelectInput","optionText","PostPagination","Pagination","rowsPerPageOptions","RecipeList","List","filters","bulkActionButtons","perPage","pagination","Datagrid","rowClick","TextField","NumberField","ReferenceField","RecipeShow","Show","SimpleShowLayout","toolbarOptions","list","indent","direction","size","color","background","font","align","RecipeForm","SimpleForm","NumberInput","validate","toolbar","RecipeEdit","Edit","RecipeCreate","Create","CategoryCreate","CategoryList","CategoryEdit","CategoryShow","DateField","login","username","password","Promise","reject","localStorage","setItem","window","location","reload","resolve","logout","removeItem","checkError","status","checkAuth","getItem","getPermissions","messages","resources","recipes","name","fields","category_id","ingredients","directions","categories","created_at","updated_at","myroot","i18nProvider","polyglotI18nProvider","preAuthDataProvider","getList","data","getOne","getMany","getManyReference","create","update","updateMany","delete","deleteMany","App","state","dataProvider","key","setState","headers","client","ApolloClient","uri","buildHasuraProvider","newDataProvider","Admin","authProvider","Resource","show","edit","icon","MenuBookIcon","CategoryIcon","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.87c1d819.chunk.js","sourcesContent":["import danishMessages from 'ra-language-danish'\n\n// Add missing translations to the Danish standard\ndanishMessages.ra.navigation.page_rows_per_page = 'Rækker per side'\ndanishMessages.ra.auth.user_menu = 'Profil'\n\nexport const danishMsgs = danishMessages\n\nexport const domainMessages = {\n  resources: {\n    recipes: {\n      name: 'Opskrift |||| Opskrifter',\n      fields: {\n        title: 'Titel',\n        rating: 'Bedømmelse',\n        servings: 'Antal personer',\n        category_id: 'Kategori',\n        duration_free: 'Tid',\n        ingredients: 'Ingredienser',\n        directions: 'Fremgangsmåde',\n        source: 'Kilde',\n      },\n    },\n    categories: {\n      name: 'Kategori |||| Kategorier',\n      fields: {\n        name: 'Navn',\n        created_at: 'Oprettet d.',\n        updated_at: 'Opdateret d.',\n      },\n    },\n  },\n  myroot: {\n    servings: 'personer',\n  },\n}\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles({\n  text: {\n    fontWeight: 'bold',\n    alignContent: 'center',\n    fontSize: '2rem',\n  },\n  root: {\n    'text-align': 'center',\n  },\n})\n\nconst RecipeShowTitle = (props) => {\n  const classes = useStyles()\n  const { record } = props\n  return (\n    <div className={classes.root}>\n      <span className={classes.text}>{record.title}</span>\n    </div>\n  )\n}\n\nexport default RecipeShowTitle\n","import React, { PureComponent } from 'react'\nimport { MAX_STARS } from '../constants/stars'\n\nclass Stars extends PureComponent {\n  render() {\n    const { rating } = this.props\n    let whiteStars = MAX_STARS\n    let blackStars = 0\n    if (rating) {\n      whiteStars = MAX_STARS - Number(rating)\n      blackStars = rating > MAX_STARS ? MAX_STARS : rating\n    }\n    if (whiteStars < 0) {\n      whiteStars = 0\n    }\n    return rating ? (\n      <span>\n        {[...Array(blackStars)].map(() => (\n          <span>★</span>\n        ))}\n        {[...Array(whiteStars)].map(() => (\n          <span>☆</span>\n        ))}\n      </span>\n    ) : (\n      ''\n    )\n  }\n}\n\nexport default Stars\n","export const MAX_STARS = 5","/* eslint-disable camelcase */\nimport React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { useTranslate } from 'react-admin'\nimport Stars from '../stars'\n\nconst useStyles = makeStyles({\n  'text-left': {\n    float: 'left',\n    'text-align': 'left',\n    width: '33%',\n  },\n  'text-center': {\n    float: 'left',\n    'text-align': 'center',\n    width: '34%',\n  },\n  'text-right': {\n    float: 'left',\n    'text-align': 'right',\n    width: '33%',\n  },\n  root: {\n    paddingBlock: '3rem',\n  },\n})\n\nconst RecipeShowHeader = (props) => {\n  const translate = useTranslate()\n  const classes = useStyles()\n  const { record } = props\n  const { rating, servings, duration_free } = record\n  return (\n    <div className={classes.root}>\n      <span className={classes['text-left']}>\n        <Stars rating={rating} />\n      </span>\n      <span className={classes['text-center']}>\n        {servings} {translate('myroot.servings')}\n      </span>\n      <span className={classes['text-right']}>{duration_free}</span>\n    </div>\n  )\n}\n\nexport default RecipeShowHeader\n","import React from 'react'\nimport { RichTextField, useTranslate } from 'react-admin'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles({\n  label: {\n    fontWeight: 'bold',\n    fontSize: '1.25rem',\n    display: 'block',\n    marginBottom: '0.75rem',\n  },\n  root: {\n    paddingBlock: '1rem',\n  },\n})\n\nconst RecipeShowRichText = (props) => {\n  const translate = useTranslate()\n  const getLabel = (source) =>\n    source === 'ingredients'\n      ? translate('resources.recipes.fields.ingredients')\n      : translate('resources.recipes.fields.directions')\n  const classes = useStyles()\n  const { source } = props\n  return (\n    <div className={classes.root}>\n      <span className={classes.label}>{getLabel(source)}</span>\n      <RichTextField source {...props} />\n    </div>\n  )\n}\n\nexport default RecipeShowRichText\n","import React, { PureComponent } from 'react'\nimport Stars from './stars'\n\nclass StarRow extends PureComponent {\n  render() {\n    const { record } = this.props\n    const { rating } = record\n    return <Stars rating={rating} />\n  }\n}\n\nexport default StarRow\n","import { makeStyles } from '@material-ui/core/styles'\nimport React from 'react'\nimport {\n  minValue,\n  maxValue,\n  number,\n  ReferenceField,\n  Filter,\n  SelectInput,\n  ReferenceInput,\n  Show,\n  NumberInput,\n  RichTextField,\n  ShowView,\n  SimpleShowLayout,\n  Create,\n  Edit,\n  TextInput,\n  SimpleForm,\n  NumberField,\n  List,\n  Datagrid,\n  TextField,\n  Pagination,\n} from 'react-admin'\nimport RichTextInput from 'ra-input-rich-text'\nimport styles from './recipes.css'\nimport RecipeShowTitle from './recipeViews/recipeShowTitle'\nimport RecipeShowHeader from './recipeViews/recipeShowHeader'\nimport RecipeShowRichText from './recipeViews/recipeShowRichText'\nimport StarRow from './starRow'\n\nconst PostTitle = ({ record }) => {\n  return <span>{record ? `${record.title}` : ''}</span>\n}\nconst validateRating = [number(), minValue(1), maxValue(5)]\n\nconst RecipeFilter = (props) => (\n  <Filter {...props}>\n    <TextInput source=\"title\" alwaysOn />\n    <TextInput source=\"ingredients\" alwaysOn />\n    <ReferenceInput source=\"category_id\" reference=\"categories\" allowEmpty>\n      <SelectInput optionText=\"name\" />\n    </ReferenceInput>\n  </Filter>\n)\n\nconst PostPagination = (props) => <Pagination rowsPerPageOptions={[10, 25, 50, 100]} {...props} />\n\nexport const RecipeList = (props) => (\n  <List {...props} filters={<RecipeFilter />} bulkActionButtons={false} perPage={100} pagination={<PostPagination />}>\n    <Datagrid rowClick=\"show\">\n      <TextField source=\"title\" />\n      <StarRow source=\"rating\" />\n      <NumberField source=\"servings\" />\n      <ReferenceField source=\"category_id\" reference=\"categories\">\n        <TextField source=\"name\" />\n      </ReferenceField>\n    </Datagrid>\n  </List>\n)\n\nexport const RecipeShow = (props) => (\n  <Show {...props} title={<PostTitle />}>\n    <SimpleShowLayout>\n      <RecipeShowTitle source=\"title\" />\n      <RecipeShowHeader />\n      <RecipeShowRichText source=\"ingredients\" {...props} />\n      <RecipeShowRichText source=\"directions\" {...props} />\n      <TextField source=\"source\" />\n    </SimpleShowLayout>\n  </Show>\n)\n\nconst toolbarOptions = [\n  ['bold', 'italic', 'underline', 'strike'], // toggled buttons\n\n  [{ list: 'ordered' }, { list: 'bullet' }],\n  [{ indent: '-1' }, { indent: '+1' }], // outdent/indent\n  [{ direction: 'rtl' }], // text direction\n\n  [{ size: ['small', false, 'large', 'huge'] }], // custom dropdown\n\n  [{ color: [] }, { background: [] }], // dropdown with defaults from theme\n  [{ font: [] }],\n  [{ align: [] }],\n  ['clean'],\n]\n\nconst RecipeForm = () => (\n  <SimpleForm>\n    <TextInput source=\"title\" />\n    <NumberInput source=\"rating\" validate={validateRating} />\n    <NumberInput source=\"servings\" />\n    <TextInput source=\"duration_free\" />\n    <ReferenceInput source=\"category_id\" reference=\"categories\">\n      <SelectInput optionText=\"name\" />\n    </ReferenceInput>\n    <RichTextInput source=\"ingredients\" toolbar={toolbarOptions} />\n    <RichTextInput source=\"directions\" toolbar={toolbarOptions} />\n    <TextInput source=\"source\" />\n  </SimpleForm>\n)\n\nexport const RecipeEdit = (props) => (\n  <Edit {...props} title={<PostTitle />}>\n    {RecipeForm()}\n  </Edit>\n)\n\nexport const RecipeCreate = (props) => (\n  <Create {...props} title={<PostTitle />}>\n    {RecipeForm()}\n  </Create>\n)\n","import React from 'react'\nimport {\n  DateField,\n  Filter,\n  SelectInput,\n  ReferenceInput,\n  Show,\n  NumberInput,\n  RichTextField,\n  ShowView,\n  SimpleShowLayout,\n  Create,\n  Edit,\n  TextInput,\n  SimpleForm,\n  NumberField,\n  List,\n  Datagrid,\n  TextField,\n} from 'react-admin'\n\nexport const CategoryCreate = (props) => (\n  <Create {...props}>\n    <SimpleForm>\n      <TextInput source=\"name\" />\n    </SimpleForm>\n  </Create>\n)\n\nexport const CategoryList = (props) => (\n  <List {...props}>\n    <Datagrid rowClick=\"edit\">\n      <TextField source=\"name\" />\n    </Datagrid>\n  </List>\n)\n\nexport const CategoryEdit = (props) => (\n  <Edit {...props}>\n    <SimpleForm>\n      <TextInput source=\"name\" />\n    </SimpleForm>\n  </Edit>\n)\n\nexport const CategoryShow = (props) => (\n  <Show {...props}>\n    <SimpleShowLayout>\n      <TextField source=\"name\" />\n      <DateField source=\"created_at\" />\n      <DateField source=\"updated_at\" />\n    </SimpleShowLayout>\n  </Show>\n)\n","export default {\n  // called when the user attempts to log in\n  login: ({ username, password }) => {\n    // Reject unless special username provided\n    if (username !== 'foodGoesNomNom') {\n      return Promise.reject()\n    }\n    // If somebody uses the special username they still won't know the password\n    // Thus the page will just keep spitting out an error\n    localStorage.setItem('key', password)\n    // Hack to force App to update to get the proper dataProvider\n    window.location.reload()\n    return Promise.resolve()\n  },\n  // called when the user clicks on the logout button\n  logout: () => {\n    localStorage.removeItem('key')\n    return Promise.resolve()\n  },\n  // called when the API returns an error\n  checkError: ({ status }) => {\n    if (status === 401 || status === 403) {\n      localStorage.removeItem('key')\n      return Promise.reject()\n    }\n    return Promise.resolve()\n  },\n  // called when the user navigates to a new location, to check for authentication\n  checkAuth: () => {\n    return localStorage.getItem('key') ? Promise.resolve() : Promise.reject()\n  },\n  // called when the user navigates to a new location, to check for permissions / roles\n  getPermissions: () => Promise.resolve(),\n}\n","import MenuBookIcon from '@material-ui/icons/MenuBook'\nimport CategoryIcon from '@material-ui/icons/Category'\nimport React, { Component } from 'react'\nimport buildHasuraProvider from 'ra-data-hasura-graphql'\nimport { Admin, Resource } from 'react-admin'\nimport ApolloClient from 'apollo-boost'\nimport polyglotI18nProvider from 'ra-i18n-polyglot'\nimport { domainMessages, danishMsgs } from './i18n'\nimport { RecipeList, RecipeEdit, RecipeCreate, RecipeShow } from './components/recipes'\nimport { CategoryCreate, CategoryList, CategoryEdit, CategoryShow } from './components/categories'\nimport authProvider from './authProvider'\n\nconst messages = { ...danishMsgs, ...domainMessages }\nconst i18nProvider = polyglotI18nProvider(() => messages)\n\nconst preAuthDataProvider = {\n  getList: () => Promise.resolve({ data: [] }),\n  getOne: () => Promise.resolve(null),\n  getMany: () => Promise.resolve(null),\n  getManyReference: () => Promise.resolve(null),\n  create: () => Promise.resolve(null),\n  update: () => Promise.resolve(null),\n  updateMany: () => Promise.resolve(null),\n  delete: () => Promise.resolve(null),\n  deleteMany: () => Promise.resolve(null),\n}\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = { dataProvider: null }\n  }\n\n  async componentDidMount() {\n    const key = localStorage.getItem('key')\n    if (!key) {\n      this.setState({ dataProvider: preAuthDataProvider })\n      return\n    }\n    const headers = {\n      'content-type': 'application/json',\n      'x-hasura-admin-secret': key,\n    }\n    const client = new ApolloClient({\n      uri: 'https://floating-meadow-53258.herokuapp.com/v1/graphql',\n      headers,\n    })\n\n    const dataProvider = await buildHasuraProvider({ client })\n    this.setState({ dataProvider })\n  }\n\n  async componentDidUpdate() {\n    const key = localStorage.getItem('key')\n    const { dataProvider } = this.state\n    if (dataProvider === null && key) {\n      const headers = {\n        'content-type': 'application/json',\n        'x-hasura-admin-secret': key,\n      }\n      const client = new ApolloClient({\n        uri: 'https://floating-meadow-53258.herokuapp.com/v1/graphql',\n        headers,\n      })\n\n      const newDataProvider = await buildHasuraProvider({ client })\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({ dataProvider: newDataProvider })\n    }\n  }\n\n  render() {\n    const { dataProvider } = this.state\n\n    if (!dataProvider) {\n      return <div>Loading</div>\n    }\n\n    return (\n      <Admin dataProvider={dataProvider} authProvider={authProvider} i18nProvider={i18nProvider}>\n        <Resource\n          name=\"recipes\"\n          show={RecipeShow}\n          list={RecipeList}\n          edit={RecipeEdit}\n          create={RecipeCreate}\n          icon={MenuBookIcon}\n        />\n        <Resource\n          name=\"categories\"\n          show={CategoryShow}\n          list={CategoryList}\n          edit={CategoryEdit}\n          create={CategoryCreate}\n          icon={CategoryIcon}\n        />\n      </Admin>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { BrowserRouter } from \"react-router-dom\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}